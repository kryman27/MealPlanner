@page "/findproduct"
@using MealPlannerUI.Data
@inject ProductInfoService prodInfoServ

<div>
    <h3>Find Product</h3>
    <br/>
    <label>Enter product name part:</label>
    <input type="text" value="@findThisNamePart" @oninput="UpdateFindThisNamePart" />
    <button class="btn btn-primary" @onclick="@FindOneProduct">Find product</button>
    &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;
    &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;
    
</div>
<br/>
<br/>
<table class="table" name="aaa">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Fat</th>
            <th>Carbohydrates</th>
            <th>Proteins</th>
            <th>Energy(per 100g)</th>
            
        </tr>
    </thead>
    <tbody>
        @if (firstRenderFlag)
        {
            <tr>
                <td>null</td>
                <td>null</td>
                <td>null</td>
                <td>null</td>
                <td>null</td>
                <td>null</td>
                <td></td>
            </tr>
        }
        else
        {
            @foreach (var p in found)
            {
                <tr>
                    <td>@p.ProductId</td>
                    <td>@p.ProductName</td>
                    <td>@p.Fat</td>
                    <td>@p.Carbohydrates</td>
                    <td>@p.Protein</td>
                    <td>@p.Energy</td>
                    <td><button class="btn btn-primary" @onclick="() => DeleteSelected(p.ProductId)">Delete item</button></td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    string findThisNamePart = string.Empty;

    bool firstRenderFlag = true;

    private List<ProductInfo> found;

    private void UpdateFindThisNamePart(ChangeEventArgs e)
    {
        findThisNamePart = e.Value.ToString();
    }

    private async Task FindOneProduct()
    {
        try
        {
            var prod = await prodInfoServ.GetSingleProductInfo(findThisNamePart);
            if (prod.Count != 0)
            {
                found = prod;
                findThisNamePart = string.Empty;
                firstRenderFlag = false;
            }
            else
            {
                found.Add(new ProductInfo { ProductName = "Product was not found" });
                findThisNamePart = string.Empty;
                firstRenderFlag = false;
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private async Task DeleteSelected(int id)
    {
        var test = found;
        var response = await prodInfoServ.DeleteSelectedProduct(id);

        if(response.IsSuccessStatusCode == true)
        {
            found.Remove(found.FirstOrDefault(x => x.ProductId == id));
        }
        else
        {
            found.FirstOrDefault(x => x.ProductId == id).ProductName = "Something gone wrong. Refresh and try again";
        }
    }
}
