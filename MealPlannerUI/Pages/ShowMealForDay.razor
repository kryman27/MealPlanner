@page "/show-meals-for-day"
@using MealPlannerUI.Data
@using ModelsLib.Model
@inject MealService MealService
@inject UserPreferencesService UPServ

<head>
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
</head>

<h3>Show Meal For Day</h3>

<div style="border-color: black; border: solid; width: 1600px; height: 800px;">
    <div style="border-color: red; border: solid; width: 50%; height: 100%; float: left">
        <MudSimpleTable>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Meal Name</th>
                    <th>Products</th>
                    <th>Amount [g]</th>
                    <th>kcal sum</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var m in Meals)
                {
                    <tr>
                        <td>@m.MealId</td>
                        <td>@m.MealName</td>
                        <td>
                            @foreach(var md in m.MealDetails)
                            {
                                <tr>@md.Product.ProductName</tr>
                            }
                        </td>
                        <td>
                            @foreach (var md in m.MealDetails)
                            {
                                <tr>@md.Amount</tr>
                            }
                        </td>
                        <td>@Math.Round((decimal)@m.MealDetails.Sum(x => x.Product.Energy * (x.Amount / 100.0m)), 2)</td>
                        <td><button @onclick="() => DeleteMeal(m.MealId)"><iconify-icon icon="mdi:trash" width="35" height="35"></iconify-icon></button></td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </div>

    
    <div style="border-color: yellow; border: solid; width: 25%; height: 50%; float: left">
        <b>Goals and fulfilment</b>
        <br/>
        <br/>
        <MudSimpleTable>
            <thead>
                <tr>
                    <th>Source</th>
                    <th>Energy</th>
                    <th>Fat</th>
                    <th>Proteins</th>
                    <th>Carbs</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Goal</td>
                    <td>@userPreference.DailyEnrgGoal</td>
                    <td>@userPreference.DailyFatGoal</td>
                    <td>@userPreference.DailyProteinsGoal</td>
                    <td>@userPreference.DailyCarbsGoal</td>
                </tr>
                <tr>
                    <td>Fulfilment</td>
                    <td>@energyFulfilment</td>
                    <td>@fatFulfilment</td>
                    <td>@proteinsFulfilment</td>
                    <td>@carbsFulfilment</td>
                </tr>
            </tbody>

        </MudSimpleTable>
    </div>

    <div style="border-color: yellow; border: solid; width: 25%; height: 50%; float: left">
        <MudDatePicker PickerVariant="PickerVariant.Static" @bind-Date="Date" />
    </div>
    
    <div style="border-color: blue; border: solid; width: 50%; height: 50%; float: left">
        <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
    </div>
    <div style="clear: both"></div>
</div>

<script src="_content/MudBlazor/MudBlazor.min.js"></script>

@code {



    DateTime? _date = DateTime.Today;

    public event Action<DateTime> SelectedDateChanged;

    DateTime? Date
    {
        get => _date;

        set
        {
            if(_date != value)
            {
                _date = value;
                SelectedDateChanged?.Invoke((DateTime)_date);
                GetMeals();
                GetAndSetFulfilmentSeries();
            }
        }
    }
    List<Meal> Meals = new();

    decimal? energyFulfilment;
    decimal? fatFulfilment;
    decimal? proteinsFulfilment;
    decimal? carbsFulfilment;

    public static UserPreference userPreference;

    protected override async Task OnInitializedAsync()
    {
        GetMeals();

        var temp = UPServ.RetriveUserPreferences(1);
        userPreference = new UserPreference(temp.UserId, temp.UserName, temp.DailyEnrgGoal, temp.DailyFatGoal, temp.DailyCarbsGoal, temp.DailyProteinsGoal);
        Series.Add(new ChartSeries() { Name = "Goal", Data = new double[] { userPreference.DailyEnrgGoal.Value, userPreference.DailyFatGoal.Value, userPreference.DailyProteinsGoal.Value, userPreference.DailyCarbsGoal.Value } });

        GetAndSetFulfilmentSeries();
    }

    private void GetAndSetFulfilmentSeries()
    {
        var temp = Series.Where(x => x.Name == "Fulfilment").FirstOrDefault();
        Series.Remove(temp);

        decimal? energyFulfilment = 0.0m;
        decimal? fatFulfilment = 0.0m;
        decimal? carbsFulfilment = 0.0m;
        decimal? proteinsFulfilment = 0.0m;
        foreach (var item in Meals)
        {
            energyFulfilment += item.MealDetails.Sum(x => x.Product.Energy * (x.Amount / 100));
            fatFulfilment += item.MealDetails.Sum(x => x.Product.Fat * (x.Amount / 100));
            carbsFulfilment += item.MealDetails.Sum(x => x.Product.Carbohydrates * (x.Amount / 100));
            proteinsFulfilment += item.MealDetails.Sum(x => x.Product.Protein * (x.Amount / 100));
        }

        this.energyFulfilment = Math.Round((decimal)energyFulfilment, 2);
        this.fatFulfilment = Math.Round((decimal)fatFulfilment, 2);
        this.proteinsFulfilment = Math.Round((decimal)proteinsFulfilment, 2);
        this.carbsFulfilment = Math.Round((decimal)carbsFulfilment, 2);

        Series.Add(new ChartSeries() { Name = "Fulfilment", Data = new double[] { (double)energyFulfilment, (double)fatFulfilment, (double)proteinsFulfilment, (double)carbsFulfilment } });
    }

    private void GetMeals()
    {
        Meals = MealService.GetMeals((DateTime)_date).Result;
    }

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>();

    public string[] XAxisLabels = { "Energy", "Fat", "Proteins", "Carbohydrates" };

    private void DeleteMeal(int mealId)
    {
        MealService.DeleteMeal(mealId);

        Meals = MealService.GetMeals(_date.GetValueOrDefault()).Result;

        RefreshList();
    }

    private async Task RefreshList()
    {
        var result = await MealService.GetMeals(_date.GetValueOrDefault());
        Meals = result.ToList();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await RefreshList();
        }
    }
}
