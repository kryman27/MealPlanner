@using MealPlannerUI.Data
@using ModelsLib.Model;
@inject MealService MealService
@inject ProductService ProdService

<head>
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
</head>

<MudDialog>
    <DialogContent>
        <div>
            Meal name: <input type="text" @bind="mealName" style="border: solid; border-color: grey" />
            <table class="table">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Amount [g]</th>
                        <th>Fat</th>
                        <th>Carbohydrates</th>
                        <th>Proteins</th>
                        <th>Energy</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <select style="background-color: transparent" @bind="prodSelectorTemp">
                                <option value="" disabled selected>Select product</option>
                                @foreach (var prod in prodInfForUI)
                                {
                                    <option value="@prod.ProductName">
                                        @prod.ProductName
                                    </option>
                                }
                            </select>
                        </td>
                        <td><input type="number" @bind="tempAmount" /></td>
                        <td>
                            @if (!string.IsNullOrEmpty(prodSelectorTemp))
                            {
                                @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Fat
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(prodSelectorTemp))
                            {
                                @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Carbohydrates
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(prodSelectorTemp))
                            {
                                @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Protein
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(prodSelectorTemp))
                            {
                                @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Energy
                            }
                        </td>
                        <td><button><iconify-icon icon="material-symbols:add" @onclick="() => AddToSelectedProducts(tempAmount, prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp))"></iconify-icon></button></td>
                    </tr>
                    @foreach (var selectedProduct in preparedList)
                    {
                        <tr>
                            <td>@selectedProduct.ProductName</td>
                            <td>@selectedProduct.Amount</td>
                            <td>@selectedProduct.Fat</td>
                            <td>@selectedProduct.Carbohydrates</td>
                            <td>@selectedProduct.Protein</td>
                            <td>@selectedProduct.Energy</td>
                            <td>
                                <button style="margin: auto; display:block;" @onclick="() => RemoveItemFromList(selectedProduct)"><iconify-icon icon="mdi:bin"></iconify-icon></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <table style="width: 100%; line-height:200%;">
               
                <td>
                    Weigth
                </td>
                <td>
                    @if (preparedList != null)
                    {
                        @preparedList.Sum(x => x.Amount)
                    }
                </td>
                
                
                    <td>
                        Fat
                    </td>
                    <td>
                    @if (preparedList != null)
                        {
                        @preparedList.Sum(x => (x.Fat*x.Amount/100))
                        }
                    </td>
                
                
                    <td>
                        Carbohydrates
                    </td>
                    <td>
                    @if (preparedList != null)
                        {
                        @preparedList.Sum(x => (x.Carbohydrates*x.Amount/100))
                        }
                    </td>
                
                
                    <td>
                        Proteins
                    </td>
                    <td>
                    @if (preparedList != null)
                        {
                        @preparedList.Sum(x => (x.Protein*x.Amount/100))
                        }
                    </td>
                
                    <td>
                        Energy
                    </td>
                    <td>
                    @if (preparedList != null)
                        {
                        @preparedList.Sum(x => (x.Energy*x.Amount/100))
                        }
                    </td>
                
            </table>
        </div>
        <div style="clear: both;"></div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

<script src="_content/MudBlazor/MudBlazor.min.js"></script>

@code {
    string mealName = string.Empty;
    decimal tempAmount;
    string prodSelectorTemp = String.Empty;
    List<Product>? prodInfForUI = new();

    private List<ProductIngredient> preparedList = new();
    private List<MealDetail> newMealDetails = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public DateTime? Date { get; set; }

    void Cancel() => MudDialog.Cancel();

    private void Submit()
    {
        //In a real world scenario this bool would probably be a service to delete the item from api/database
        // Snackbar.Add("Server Deleted", Severity.Success);

        AddMealToDb();

        MudDialog.Close(DialogResult.Ok(true));
    }


    protected override async Task OnInitializedAsync()
    {
        prodInfForUI = await ProdService.GetProductsInfo();
    }

    private void AddToSelectedProducts(decimal amount, Product prod)
    {

        preparedList.Add(new ProductIngredient(amount, prod.ProductId, prod.ProductName, prod.Fat, prod.Carbohydrates, prod.Protein, prod.Energy));
        tempAmount = 0.0m;
        prodSelectorTemp = string.Empty;
        var temp = CustomsCalculator.CalculateMealDetails(preparedList);

        newMealDetails.AddRange(temp);
    }

    private void RemoveItemFromList(ProductIngredient deleteThisItem)
    {
        var itemToRemove = preparedList.Where(item => item.ProductId == deleteThisItem.ProductId).FirstOrDefault();
        preparedList.Remove(itemToRemove);
        CustomsCalculator.CalculateCustomProduct(preparedList);
        if (preparedList.Count == 0)
        {
            ClearCustomProduct();
        }
    }

    private void ClearCustomProduct()
    {
        // customProduct.ProductName = String.Empty;
        // customProduct.Carbohydrates = 0.0m;
        // customProduct.Fat = 0.0m;
        // customProduct.Protein = 0.0m;
        // customProduct.Energy = 0.0m;
    }

    private void AddMealToDb()
    {
        List<MealDetail> mealDetails = new();
        decimal? totalFat = 0.0m;
        decimal? totalCarbs = 0.0m;
        decimal? totalProtein = 0.0m;
        decimal? totalEnergy = 0.0m;

        foreach(var item in preparedList)
        {
            mealDetails.Add(new MealDetail() { ProductId = item.ProductId, Amount = item.Amount});
        }



        var newMeal = new Meal() { MealDate = Date, MealName = mealName, MealDetails = mealDetails };

        MealService.AddMealToDb(newMeal);
        preparedList.Clear();
    }
}
