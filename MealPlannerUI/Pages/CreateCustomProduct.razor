@page "/create-custom-product"
@using MealPlannerUI.Data
@using ModelsLib.Model;
@inject ProductService ProdService

<PageTitle>Add product</PageTitle>
<h3><i>Create your custom product</i></h3>
<br/>
<b>Select product:</b>
<br />
<br />
<div style="width: 1400px;">
    <div style="float:left; width: 75%;">
        <table class="table">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Amount [g]</th>
                    <th>Fat</th>
                    <th>Carbohydrates</th>
                    <th>Proteins</th>
                    <th>Energy</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <select style="background-color: transparent" @bind="prodSelectorTemp">
                            <option value="" disabled selected>Select product</option>
                                @foreach (var prod in prodInfForUI)
                                {
                                    <option value="@prod.ProductName">
                                        @prod.ProductName
                                    </option>
                                }
                        </select>
                    </td>
                    <td><input type="number" @bind="tempAmount" /></td>
                    <td>
                        @if (!string.IsNullOrEmpty(prodSelectorTemp))
                        {
                            @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Fat
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(prodSelectorTemp))
                        {
                            @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Carbohydrates
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(prodSelectorTemp))
                        {
                            @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Protein
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(prodSelectorTemp))
                        {
                            @prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp)?.Energy
                        }
                    </td>
                    <td><button><iconify-icon icon="material-symbols:add" @onclick="() => AddToSelectedProducts(tempAmount, prodInfForUI.FirstOrDefault(p => p.ProductName == prodSelectorTemp))"></iconify-icon></button></td>
                </tr>
                @foreach (var selectedProduct in preparedList)
                    {
                        <tr>
                            <td>@selectedProduct.ProductName</td>
                            <td>@selectedProduct.Amount</td>
                            <td>@selectedProduct.Fat</td>
                            <td>@selectedProduct.Carbohydrates</td>
                            <td>@selectedProduct.Protein</td>
                            <td>@selectedProduct.Energy</td>
                            <td>
                                <button style="margin: auto; display:block;" @onclick="() => RemoveItemFromList(selectedProduct)"><iconify-icon icon="mdi:bin"></iconify-icon></button>
                            </td>
                        </tr>
                    }
            </tbody>
        </table>
    </div>
   
    <div style="float:left; width: 25%; border-style: solid; border-color: black;">
        <i>Values per 100 g</i>
        <table style="width: 100%; line-height:200%;">
            <tr>
                <td>
                    Meal name:
                </td>
                <td>
                    <input type="text" @bind="customProduct.ProductName"/>
                </td>
            </tr>
            <tr>
                <td>
                    Fat
                </td>
                <td>
                    @if (customProduct.Fat != null)
                    {
                        @customProduct.Fat
                    }
                </td>
            </tr>
            <tr>
                <td>
                    Carbohydrates
                </td>
                <td>
                    @if (customProduct.Carbohydrates != null)
                    {
                        @customProduct.Carbohydrates
                    }
                </td>
            </tr>
            <tr>
                <td>
                    Proteins
                </td>
                <td>
                    @if (customProduct.Protein != null)
                    {
                        @customProduct.Protein
                    }
                </td>
            </tr>
            <tr>
                <td>
                    Energy
                </td>
                <td>
                    @if (customProduct.Energy != null)
                    {
                        @customProduct.Energy
                    }
                </td>
            </tr>
            
            <tr>
                <td>
                    <button class="btn-primary" style="margin: 2px;" @onclick="AddCustomProductToDb">Save</button>
                    <Popup @ref="popupRef" />
                </td>
            </tr>
        </table>
    </div>
    <div style="clear: both;"></div>
</div>

@code {
    decimal tempAmount;
    string prodSelectorTemp = String.Empty;
    List<Product>? prodInfForUI = new();
    public static Product customProduct = new Product();
    private List<ProductIngredient> preparedList = new();

    protected override async Task OnInitializedAsync()
    {
        prodInfForUI = await ProdService.GetProductsInfo();
    }

    private void AddToSelectedProducts(decimal amount, Product prod)
    {
        preparedList.Add(new ProductIngredient(amount, prod.ProductId, prod.ProductName, prod.Fat, prod.Carbohydrates, prod.Protein, prod.Energy));
        tempAmount = 0.0m;
        prodSelectorTemp = String.Empty;
        var temp = CustomsCalculator.CalculateCustomProduct(preparedList);

        customProduct.Fat = temp.Fat;
        customProduct.Carbohydrates = temp.Carbohydrates;
        customProduct.Protein = temp.Protein;
        customProduct.Energy = temp.Energy;
    }

    private void RemoveItemFromList(ProductIngredient deleteThisItem)
    {
        var itemToRemove = preparedList.Where(item => item.ProductId == deleteThisItem.ProductId).FirstOrDefault();
        preparedList.Remove(itemToRemove);
        CustomsCalculator.CalculateCustomProduct(preparedList);
        if (preparedList.Count == 0)
        {
            ClearCustomProduct();
        }
    }

    private void ClearCustomProduct()
    {
        customProduct.ProductName = String.Empty;
        customProduct.Carbohydrates = 0.0m;
        customProduct.Fat = 0.0m;
        customProduct.Protein = 0.0m;
        customProduct.Energy = 0.0m;
    }

    private void AddCustomProductToDb()
    {
        ProdService.AddProductToDb(customProduct.ProductName, (double)customProduct.Fat, (double)customProduct.Carbohydrates, (double)customProduct.Protein, (double)customProduct.Energy);
        customProduct.ProductName = String.Empty;
        customProduct.Carbohydrates = 0.0m;
        customProduct.Fat = 0.0m;
        customProduct.Protein = 0.0m;
        customProduct.Energy = 0.0m;
        preparedList.Clear();

        ShowPopup();
    }

    private Popup popupRef;
    private void ShowPopup()
    {
        popupRef.Show("Custom product added succesfully");
    }
}
